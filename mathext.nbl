/**
 *   MathExt: Math Extended Library   
 *   Neblina Incorporated 2015, LNCC
 * 
 *   Copyright (C) 2015  Pedro CS Lara
 *
 *   This program is free software: you can redistribute it and/or modify
 *   it under the terms of the GNU General Public License as published by
 *   the Free Software Foundation, either version 3 of the License, or
 *   (at your option) any later version.
 *
 *   This program is distributed in the hope that it will be useful,
 *   but WITHOUT ANY WARRANTY; without even the implied warranty of
 *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *   GNU General Public License for more details.
 *
 *   You should have received a copy of the GNU General Public License
 *   along with this program.  If not, see <http://www.gnu.org/licenses/>.
 **/

using io
using math
def getI(N)
	I = float[N,N]
	for i = 1 : N 
		for j = 1 : N
			if i == j
				I[i,j] = 1.0
			else
				I[i,j] = 0.0 
			end
		end
	end 
	return I
end

def fat( n )
	if( n <= 1 )
		return 1
	end
	return n*fat(n-1)
end

def mat_exp( M )

	I = getI( ncols( M ) )
	T = getI( ncols( M ) )
	
	R = getI( ncols( M ) )
	for n = 1 : 10
		R = mat_mul( R, M )
		T = mat_add( T, mat_mulsc( R, 1.0/fat(n) ) )	
	    --println( T )
	end
	return T
end

def mat_pow( M, e )
    R = getI( ncols( M ) )
    B = M
	while  e > 0
	    if e % 2 == 1
	        R = mat_mul( R, M )
	    end
	    B = mat_mul( B, B )
	    e = e / 2
	end
end

def vec_variance( v )
    N = len( v )
    mean = vec_sum( v ) / N
    x = vec_prod( v, v )
    momentum = vec_sum( x )
    return momentum/N - mean*mean
end

def vec_stddev( v )
    return sqrt( vec_variance( v ) )
end

def vec_covariance( x, y )
    N = len( x )
    if len( x ) != len( y )
        println (stderr, "vec_covariance: diferent lenght vectors" )
    end 
    xy = vec_prod( x, y )
    
    meanX = vec_sum( x ) / N
    meanY = vec_sum( y ) / N
    meanXY = vec_sum( xy ) / N
    
    return meanXY - meanX*meanY
end

def vec_corr( x, y )
	return vec_covariance( x, y ) / sqrt( vec_variance( x ) *vec_variance( y ) )

end


def jacobi_richard( A, b )
    invD = float[nrows(A), ncols(A)]
    LpR  = float[nrows(A), ncols(A)]
    xk   = float[nrows(A)]
    for i = 1 : nrows(A)
        xk[i] = 0.0        
        for j = 1 : nrows(A)
            if i != j
                invD[i,j] = 0.0
                LpR[i,j] = A[i,j]
            else
                LpR[i,j] = 0.0    
                invD[i,i] = 1.0/A[i,i]
            end    
        end
    end
    
    
    invDb = mat_mulvec( invD, b )
    for i = 1 : nrows(A)
        mat_mulscrow( LpR, invD[i,i], i )
    end
    
    i = 0
    while i < 1000
        xk = mat_mulvec( LpR, xk ) 
        x = vec_sub( xk, invDb )
        i = i + 1
    end 
    return xk
end

/*
def mat_exp( M )
    I = getI( ncols( M ) )
	T = getI( ncols( M ) )
	R = getI( ncols( M ) )
	n = 1
	while( 1==1 )
		R = mat_mul( R, M )
		valorAntigo = T[1,1]
		S = mat_mulsc( R, 1.0/fat(n) )
		T = mat_add( T, S )
		if abs( valorAntigo - T[1,1]) < 0.0001 or n >= 12
		    return T
		end
		n = n + 1	
	end
	return T
end*/
